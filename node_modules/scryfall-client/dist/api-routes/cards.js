"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCard = exports.getCardBySetCodeAndCollectorNumber = exports.getCollection = exports.random = exports.autocomplete = exports.getCardNamed = exports.search = void 0;
/* Cards - https://scryfall.com/docs/api/cards */
var api_request_1 = require("../lib/api-request");
var list_1 = __importDefault(require("../models/list"));
// https://scryfall.com/docs/api/cards/search
function search(searchString, options) {
    if (options === void 0) { options = {}; }
    var query = __assign({ q: searchString }, options);
    return api_request_1.get("/cards/search", query);
}
exports.search = search;
// https://scryfall.com/docs/api/cards/named
function getCardNamed(name, options) {
    var _a;
    if (options === void 0) { options = {}; }
    var kind = options.kind || "fuzzy";
    var query = (_a = {},
        _a[kind] = name,
        _a);
    if (options.set) {
        query.set = options.set;
    }
    return api_request_1.get("/cards/named", query);
}
exports.getCardNamed = getCardNamed;
// https://scryfall.com/docs/api/cards/autocomplete
function autocomplete(searchString, options) {
    if (options === void 0) { options = {}; }
    var query = __assign({ q: searchString }, options);
    return api_request_1.get("/cards/autocomplete", query);
}
exports.autocomplete = autocomplete;
// https://scryfall.com/docs/api/cards/random
function random(searchString) {
    if (!searchString) {
        return api_request_1.get("/cards/random");
    }
    return api_request_1.get("/cards/random", {
        q: searchString,
    });
}
exports.random = random;
// https://scryfall.com/docs/api/cards/collection
function getCollection(identifiers) {
    var idBatches = identifiers.reduce(function (array, entry, i) {
        if (i % 75 !== 0) {
            return array;
        }
        return array.concat([identifiers.slice(i, i + 75)]);
    }, []);
    return Promise.all(idBatches.map(function (ids) {
        return api_request_1.post("/cards/collection", {
            identifiers: ids,
        });
    })).then(function (collectionResults) {
        var warnings = [];
        var notFound = [];
        collectionResults.forEach(function (result) {
            var list = result;
            warnings.push.apply(warnings, list.warnings);
            notFound.push.apply(notFound, list.not_found);
        });
        var collection = collectionResults.flat();
        // coerce back into a List
        return new list_1.default({
            object: "list",
            warnings: warnings,
            not_found: notFound,
            data: collection,
        });
    });
}
exports.getCollection = getCollection;
// https://scryfall.com/docs/api/cards/collector
function getCardBySetCodeAndCollectorNumber(code, collectorNumber, lang) {
    var url = "/cards/" + code + "/" + collectorNumber;
    if (lang) {
        url += "/" + lang;
    }
    return api_request_1.get(url);
}
exports.getCardBySetCodeAndCollectorNumber = getCardBySetCodeAndCollectorNumber;
// https://scryfall.com/docs/api/cards/multiverse
function getCardByMultiverseId(id) {
    return api_request_1.get("/cards/multiverse/" + id);
}
// https://scryfall.com/docs/api/cards/mtgo
function getCardByMtgoId(id) {
    return api_request_1.get("/cards/mtgo/" + id);
}
// https://scryfall.com/docs/api/cards/arena
function getCardByArenaId(id) {
    return api_request_1.get("/cards/arena/" + id);
}
// https://scryfall.com/docs/api/cards/tcgplayer
function getCardByTcgPlayerId(id) {
    return api_request_1.get("/cards/tcgplayer/" + id);
}
// https://scryfall.com/docs/api/cards/id
function getCardByScryfallId(id) {
    return api_request_1.get("/cards/" + id);
}
function getCard(idOrName, kind) {
    if (kind === void 0) { kind = "scryfall"; }
    var value = String(idOrName);
    switch (kind) {
        case "multiverse":
            return getCardByMultiverseId(value);
        case "arena":
            return getCardByArenaId(value);
        case "mtgo":
            return getCardByMtgoId(value);
        case "tcg":
            return getCardByTcgPlayerId(value);
        case "exactName":
            return getCardNamed(value, { kind: "exact" });
        case "name":
        case "fuzzyName":
            return getCardNamed(value, { kind: "fuzzy" });
        case "id":
        case "scryfall":
        default:
            return getCardByScryfallId(value);
    }
}
exports.getCard = getCard;

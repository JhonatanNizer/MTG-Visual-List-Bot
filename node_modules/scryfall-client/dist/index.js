"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var api_request_1 = require("./lib/api-request");
var enque_task_1 = require("./lib/api-request/enque-task");
var wrap_scryfall_response_1 = __importStar(require("./lib/wrap-scryfall-response"));
var convert_symbols_to_emoji_1 = require("./lib/convert-symbols-to-emoji");
var cards_1 = require("./api-routes/cards");
var sets_1 = require("./api-routes/sets");
var catalog_1 = require("./api-routes/catalog");
var DEFAULT_SYMBOL_URI_PREFIX = "https://c2.scryfall.com/file/scryfall-symbols/card-symbols/";
var SYMBOL_URL_PREFIX = DEFAULT_SYMBOL_URI_PREFIX;
// we don't know what the best cdn for the region to use will
// be so we start off assuming c2, but make a request out to
// find the best one when the module gets loaded
api_request_1.get("/symbology").then(function (result) {
    var fullUri = result[0].svg_uri;
    SYMBOL_URL_PREFIX = fullUri.replace(/[^/]*.svg/, "");
});
function setTextTransform(func) {
    wrap_scryfall_response_1.setTextTransform(func);
}
function slackify() {
    wrap_scryfall_response_1.setTextTransform(convert_symbols_to_emoji_1.slack);
}
function discordify() {
    wrap_scryfall_response_1.setTextTransform(convert_symbols_to_emoji_1.discord);
}
function resetTextTransform() {
    wrap_scryfall_response_1.resetTextTransform();
}
function setApiRequestDelayTime(waitTime) {
    enque_task_1.setTaskDelayTime(waitTime);
}
function resetApiRequestDelayTime() {
    enque_task_1.resetTaskDelayTime();
}
function getSymbolUrl(symbol) {
    var match = symbol.match(/{?([^{}]+)}?/);
    var character = match ? match[1] : symbol;
    return SYMBOL_URL_PREFIX + character.toUpperCase() + ".svg";
}
function wrap(body) {
    return wrap_scryfall_response_1.default(body);
}
module.exports = {
    setApiRequestDelayTime: setApiRequestDelayTime,
    resetApiRequestDelayTime: resetApiRequestDelayTime,
    setTextTransform: setTextTransform,
    slackify: slackify,
    discordify: discordify,
    resetTextTransform: resetTextTransform,
    getSymbolUrl: getSymbolUrl,
    get: api_request_1.get,
    post: api_request_1.post,
    wrap: wrap,
    getSets: sets_1.getSets,
    getSet: sets_1.getSet,
    getSetByTcgId: sets_1.getSetByTcgId,
    search: cards_1.search,
    autocomplete: cards_1.autocomplete,
    getCollection: cards_1.getCollection,
    getCard: cards_1.getCard,
    getCardNamed: cards_1.getCardNamed,
    getCardBySetCodeAndCollectorNumber: cards_1.getCardBySetCodeAndCollectorNumber,
    getCatalog: catalog_1.getCatalog,
};
